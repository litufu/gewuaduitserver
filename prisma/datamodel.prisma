enum Role {
  ADMIN
  CUSTOMER
}

type User {
  id: ID! @id
  email: String! @unique
  emailvalidated: Boolean! @default(value: false)
  validateEmailToken: String! @unique
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  password: String!
  resetPasswordToken: String! @unique
  resetPasswordExpires: Float
  name: String!
  role: Role! @default(value: CUSTOMER)
  accountingFirm:AccountingFirm
  projects:[Project!]!
  mergeProjects:[MergeProject!]!
  dataRecords:[DataRecord!]!
}

type Comment{
  id: ID! @id
  title:String!
  content:String!
  email:String
  createdAt: DateTime! @createdAt
}

type Vedio{
  id: ID! @id
  no: Int!
  title:String!
  url:String!
  poster:String
}

type AccountingFirm{
  id: ID! @id
  name:String!  @unique
  code:String!  @unique
  address:String!
  phone:String!
  email:String!
  contact:String!
  zipCode:String
  fax:String
  returnAddress:String
  returnPhone:String
  returnPerson:String
  employees:[User!]!
  customers:[Company!]!
}

enum CompanyType {
  DOMESTIC
  OUTLANDS
}

enum CompanyNature{
  STATEOWNED
  LISTED
  PLANNEDLISTED
  OTHER
}

type NoneCompany{
  id: ID! @id
  name:String!  @unique
}


type Company{
  id: ID! @id
  type:CompanyType!
  nature:CompanyNature!
  name:String!  @unique
  code:String
  address:String
  legalRepresentative:String
  establishDate:DateTime
  registeredCapital:String
  paidinCapital:String
  businessScope:String
  holders:[Holder!]!
  mainMembers:[MainMember!]!
  lastControllCompany:String
  lastControllPerson:String
  relatedParties:[RelatedParty!]!
  sonProjects:[MergeProject!]! @relation(name: "Son")
  parentProjects:[MergeProject!]! @relation(name: "Parent")
  accountingFirms:[AccountingFirm!]! @relation(link: TABLE)
}

type CompanyStdName{
  id: ID! @id
  dbName:String!
  originName:String!
  stdName:String!
}

type MainMember{
  id: ID! @id
  name:String!
  post:String!
  company:Company!
}

type Holder{
  id: ID! @id
  name:String!
  ratio:Float!
  company:Company!
}

type RelatedParty{
  id: ID! @id
  grade:Int!
  relationship:String!
  type:String!
  name:String!
  company:Company!
}

type LetterOfProof{
  id: ID! @id
  subjectName:String!
  name:String!
  adrress:String
  contact:String
  telephone:String
  zipCode:String
  sampleReason:String
  currencyType:String
  sendDate:String
  sendNo:String
  receiveDate:String
  receiveNo:String
  balance:Float
  amount:Float
  sendBalance:Float
  sendAmount:Float
  receiveBalance:Float
  receiveAmount:Float
  sendPhoto:String
  receivePhoto:String
  proofPhoto:String
  project:Project!
}

type Project{
  id: ID! @id
  accountingFirm:AccountingFirm!
  company:Company!
  startTime:DateTime!
  endTime:DateTime!
  members:[Member!]! @relation(link: TABLE)
}

type MergeProject{
  id: ID! @id
  accountingFirm:AccountingFirm!
  sonCompanies:[Company!]! @relation(name: "Son")
  parentCompany:Company! @relation(name: "Parent")
  startTime:DateTime!
  endTime:DateTime!
  users:[User!]!
}

enum ProjectRole{
  MANAGER
  PARTNER
  ASSISTANT
  QC
  REVIEWPARTNER
  JUDGE
  CPA
}

type Member{
  id: ID! @id
  project:Project!
  user:User!
  role:ProjectRole!
}

type DataRecord{
  id: ID! @id
  accountingFirm:AccountingFirm!
  company:Company!
  startTime:DateTime!
  endTime:DateTime!
  uploadTime:DateTime!  @createdAt
  files:[File!]!
  users:[User!]! @relation(link: TABLE)
}

enum FileType{
  SUBJECTBALANCE
  CHRONOLOGICALACCOUNT
  AUXILIARYACCOUNTING
}

type File {
  id: ID! @id
  path: String!
  filename: String!
  mimetype: String!
  type:FileType!
}

type SubjectContrast{
  id: ID! @id
  origin:String! @unique
  tb:String!
  fs:String!
  coefficient:Int!
  direction:String!
  firstClass:String!
  secondClass:String!
}

type TbSubject{
  id: ID! @id
  show:String! @unique
  subject:String!
  direction:String!
  order:Int!
}

type FSSubject{
  id: ID! @id
  name:String!
  show:String!
  subject:String!
  direction:String!
}

type StdSubject{
  id: ID! @id
  code:String! @unique
  name:String! @unique
}